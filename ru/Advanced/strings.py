"""
Дополнительные вещи для работы с вводом, выводом и строками.
Здесь будут рассматриваться функции print(), класс "str" и класс collections.UserString
"""

# --------------------------------------------ФУНКЦИЯ PRINT()-----------------------------------------------------------

# Функция print() используется, что выводить какую-то информацию в консоль.

# Чтобы написать что-то между элементами, используется параметр sep - из-за него у нас будет не просто пробел между
# значениями, а конструкция "/-\".

# В конце строки вывода будут 3 знака - "!.?" - они там появились благодаря параметру end, который отвечает за описание
# конца строки и смещение курсора

# (если end не изменить, то из-за него курсор переместится на следующую строку, поэтому обычно несколько функций print()
# выписывают все в нескольких строках)
print("Какой-то текст", "Промежуточный текст", "Конец текста", sep="/-\\", end="!.?")
# Функция print() есть еще 2 параметра - file и flush. Они нужны для работы с файлами, но используются очень редко,
# так как помимо них есть аналогичная функция file.write()

# В примере также затрагивался символ '\'. Он нужен, чтобы использовать спец. символы, которых нет на клавиатуре.
# Примеры: \n = нажатие клавиши Enter, \t = нажатие клавиши Tab, \\ = написать символ '\'.


# ----------------------------------------ВЫВОД ПЕРЕМЕННЫХ С ТЕКСТОМ----------------------------------------------------

# Иногда нужно вывести переменные с неким текстом.
a = 15
print("Переменная 'a' хранит число " + str(a))  # это способ, который я показываю в обучении обычно

# Но есть способы проще - "форматирование строки".

# Способ 1: использовать метод format() класса str - самый сложный и реже всех используется
print("Переменная 'a' хранит число {:n}".format(a))
# Этот способ может скрыто содержать ошибку, IDE не будет подчеркивать проблему, если вы пытаетесь вывести не тот тип
# значения. Также этот способ очень старый, чаще используют очень похожую вариацию.

# Способ 2: использовать скрытый метод класса str
print("Переменная 'a' хранит число %d" % a)
# Если здесь указать вывод значения не того типа, который ожидался, то также будет ошибка, которую IDE не зафиксирует.

# Способ 3: использовать мгновенное форматирование строки.
print(f"Переменная 'a' хранит число {a}")  # самый простой способ, на практике встречается чаще остальных
# Тут уже не будет скрытой ошибки, так как тут не имеет значения, какой тип находится внутри '{}'


# Часто бывает и такое, что нужно вывести сразу список значений, которые разделены одинаковым символом.
# Ранее был описан способ с помощью параметра sep функции print(), но также есть альтернатива - метод join() класса str
print(" || ".join(str(i) for i in range(1, 11)))  # 1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 || 9 || 10
# Минусом этого способа является то, что в списке обязательно должны находиться значения типа str

# ----------------------------------------ДРУГИЕ МЕТОДЫ КЛАССА STR------------------------------------------------------

# "первое" -> "Первое"
print("первое слово будет начинаться с заглавной буквы".capitalize())

# ВСЕ БУКВЫ СТАНОВЯТСЯ ЗАГЛАВНЫМИ
print("Все буквы становятся заглавными".upper())

# все буквы становятся заглавными
print("ВСЕ БУКВЫ СТАНОВЯТСЯ СТРОЧНЫМИ".lower())

# ['Строка', 'превратится', 'в', 'список', 'слов,', 'разделенных', 'пробелом']
print("Строка превратится в список слов, разделенных пробелом".split())
# У этого метода есть 2 параметра:
# sep - какой(ие) символ(ы) делит(ят) разделяют строку;
# maxsplit - сколько раз разделять

# Находит ближайший индекс какого-либо символа(ов)
print("1234567890".find('2'))  # 1

# Считает кол-во определенных символов в строке
print("11 22222 333".count('1'))  # 2

# Заменяет какое-то кол-во (обычно все) символов на другие символы
print("1 2 3 4".replace('1', '9'))  # "9 2 3 4"

# Проверяет, все ли символы заглавные
print("ВСЕ БУКВЫ ЗАГЛАВНЫЕ".isupper())  # True

# Проверяет, все ли буквы строчные
print("Не все Буквы СтроЧные".islower())  # False

# Проверяет, что в строке только цифры
print("1245".isalnum())  # True

# Проверяет, что в строке только буквы
print("В строке только буквы".isalpha())  # True

# Пишет текст в центре строки с определенной длинной
# (если символов меньше, чем длина строки - строка заполняется пробелами)
print("Тут 15 символов".center(25))  # "     Тут 15 символов     "

# Проверяет, с чего начинается строка
print("Строка начинается со слова 'Строка'".startswith("Строка"))  # True

# Проверяет, чем заканчивается строка
print("Строка заканчивается на слово 'Строка'".endswith("'Строка'"))  # True


# -------------------------------------КЛАСС UserString БИБЛИОТЕКИ COLLECTIONS------------------------------------------

# Бывают случаи, когда нужно сделать изменить класс str, чтобы работа с ним была удобней.
# Но сделать это очень сложно, так как str - стандартный класс-тип в питоне. Поэтому придумали класс UserString.
# Обычно его используют, чтобы создать собственный класс, который наследует класс UserString, и изменить в нем
# стандартные функции.

from collections import UserString  # модуль collections подробнее разобран в другом файле


# Пример использования
class String(UserString):
    def __init__(self) -> None:
        super().__init__("Просто строка")

    def __str__(self) -> str:
        return f"Класс String, содержит {self.data}"


string = String()
print(string)
