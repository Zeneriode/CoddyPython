"""
Задачи для первого модуля - их выполнение гарантирует успешное прохождение 1 модуля
Каждая задача может быть выполнена по-разному. Чем больше вариантов решения - тем лучше модуль изучен
Перед просмотром решений, конечно, желательно сначала их сделать самому
"""

# TODO Считывать имя и возраст, вывести "Привет, {имя}. Тебе {возраст} лет!"

# Ввод одинаков всегда
name = input("Ваше имя: ")
age = int(input("Ваш возраст (только число): "))

# вариант 1 - выписать, используя параметр sep
print("Привет, ", name, ". Тебе ", age, " лет!", sep="")

# вариант 2 - выписать, используя слияние строк
print("Привет, " + name + ". Тебе " + str(age) + " лет!")

# вариант 3 - выписать, используя форматирование строки
print(f"Привет, {name}. Тебе {age} лет!")

# ======================================================================================================================

# TODO Считывать координаты 2 клеток на шахматной доске,
#  проверить, может ли король за 1 ход попасть из одной клетки в другую

# Ввод стандартный - 4 переменные для 4 чисел
x1 = int(input("Первая координата первой клетки"))
y1 = int(input("Вторая координата первой клетки"))
x2 = int(input("Первая координата второй клетки"))
y2 = int(input("Вторая координата второй клетки"))

# вариант 1 - разница между координатами по горизонтали и вертикали не должны отличаться более чем на 1
if -1 <= x1 - x2 <= 1 and -1 <= y1 - y2 <= 1:
    print("Может")
else:
    print("Не может")

# вариант 2 - то же самое, но используем модуль разности, а также запишем сокращенный if
print("Может" if (abs(x1 - x2) <= 1) and (abs(y1 - y2) <= 1) else "Не может")

# ======================================================================================================================

# TODO Считывать координаты 2 клеток и написать, за сколько ходов ладья, слон и ферзь дойдут из одной клетки в другую.

# Ввод такой же, как и в прошлой задаче
x1 = int(input("Первая координата первой клетки"))
y1 = int(input("Вторая координата первой клетки"))
x2 = int(input("Первая координата второй клетки"))
y2 = int(input("Вторая координата второй клетки"))

# Все объяснения кода лично, тут только решение для каждой из фигур

print(1 if x1 == x2 or y1 == y2 else 2)  # ладья

print(1 if abs(x1 - x2) == abs(y1 - y2) else 2)  # офицер

print(1 if x1 == x2 or y1 == y2 or abs(x1 - x2) == abs(y1 - y2) else 2)  # ферзь

# ======================================================================================================================

# TODO Дан год, вывести, високосный он или нет

# Считываем год - стандартный ввод
year = int(input())

# вариант 1 - год должен делиться на 4, не делиться на 100 либо делиться на 400
if year % 400 == 0:
    print("Високосный")
elif year % 4 == 0 and year % 100 != 0:
    print("Високосный")
else:
    print("Невисокосный")

# вариант 2 - то же самое, но в условиях мы не будем сравнивать с 0, а проверим на bool значения
if not year % 400:  # если остатка нет, то будет 0 = False -> not 0 = True
    print("Високосный")
elif not year % 4 and year % 100:
    print("Високосный")
else:
    print("Невисокосный")

# вариант 3 - то же самое, но сокращенный if
print("Високосный" if year % 4 == 0 and year % 100 != 0 or year % 400 == 0 else "Невисокосный")

# ======================================================================================================================

# TODO дано 2 числа, вывести его НОД

# Ввод всегда одинаков
a = int(input())
b = int(input())

# вариант 1 - алгоритм Евклида - единственный вариант, который будет работать быстро при любых данных
# решить эту задачу можно только с помощью этого алгоритма
while min(a, b) != 0:
    if a < b:
        b = b % a
    else:
        a = a % b
print(max(a, b))

# вариант 2 - использование функции из библиотеки math
import math

print(math.gcd(a, b))

# ======================================================================================================================

# TODO вывести факториал введённого числа

# Ввод одинаковый
n = int(input())

# вариант 1 - через цикл while
fact = 1  # сохраняет факториал числа
while n > 0:
    fact *= n
    n -= 1
print(fact)

# вариант 2 - использование функции из библиотеки math
import math

print(math.factorial(n))
