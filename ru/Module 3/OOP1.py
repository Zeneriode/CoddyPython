# Занятие 9 - знакомство с ООП.
# В проектах часто есть части, которые можно объединить в единую систему - они связанны с одним предметом/алгоритмом.
# Для этого придумали Объектно Ориентированное Программирование - основанное на объектах.
# Чтобы создать объект, нужен класс - чертёж какого-то предмета.

# Создаём класс
class Animal:
    # В большинстве классов есть функция __init__ - с помощью нее мы создаем конструктор для класса
    def __init__(self, color: str = "white", voice: str = ""):  # в скобках пишем self и аргументы объекта
        """Животное - у него есть цвет и оно умеет издавать голос\n
        :param color цвет животного\n
        :param voice голос, который издает животное
        """
        # в документации к функции __init__ мы пишем, что это за класс и какие аргументы можно вставить

        self.color = color  # сохраняем аргументы как переменные класса - их можно использовать в любом методе класса
        self.voice = voice

    def do_voice(self) -> str:  # в классе можно создавать личные функции - методы - они не будут работать без объекта
        """Животное подает голос"""
        return self.voice  # если метод не статичен, то мы минимум 1 раз используем параметры класса


animal = Animal("green", "rrr")  # создаём объект - та же переменная, но умеющая делать что-то свое
print(animal.color)  # можем просто выписать любой параметр
print(animal.do_voice())  # а можем использовать методы


# Если нам нужен класс, который очень похож на предыдущий, но должен иметь другие свойства,
# можно использовать наследование и создать подкласс
class Tiger(Animal):
    # У подкласса есть все, что было у высшего класса, это можно не писать заново
    # Теперь __init__ не нужен, если мы не будем добавлять новые параметры, старые у нас уже есть из класса Animal
    # можем изменить предыдущую функцию или создать новую, в Animal или в других подклассах будет другое
    def do_voice(self):
        """Возвращает голос + добавляет на следующей строке, что это тигр"""
        return self.voice + "\nI'm a Tiger!"
    # теперь метод do_voice будет работать не так, как это было в высшем классе


tiger = Tiger("orange", "RRR")  # создаём новый объект
tiger.color = "black"  # можем просто изменить ему параметр по ходу программы
print(tiger.color)
print(tiger.do_voice())  # теперь тут не будет функции из Animal, мы её переписали в подклассе
